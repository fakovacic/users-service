// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/users-service/internal/users"
	"sync"
)

// Ensure, that ServiceMock does implement users.Service.
// If this is not the case, regenerate this file with moq.
var _ users.Service = &ServiceMock{}

// ServiceMock is a mock implementation of users.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked users.Service
// 		mockedService := &ServiceMock{
// 			CreateFunc: func(contextMoqParam context.Context, user *users.User) (*users.User, error) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(ctx context.Context, id string) error {
// 				panic("mock out the Delete method")
// 			},
// 			ListFunc: func(contextMoqParam context.Context, meta *users.Meta) (*users.Meta, []*users.User, error) {
// 				panic("mock out the List method")
// 			},
// 			UpdateFunc: func(contextMoqParam context.Context, user *users.User, strings []string) (*users.User, error) {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedService in code that requires users.Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(contextMoqParam context.Context, user *users.User) (*users.User, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) error

	// ListFunc mocks the List method.
	ListFunc func(contextMoqParam context.Context, meta *users.Meta) (*users.Meta, []*users.User, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(contextMoqParam context.Context, user *users.User, strings []string) (*users.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// User is the user argument value.
			User *users.User
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Meta is the meta argument value.
			Meta *users.Meta
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// User is the user argument value.
			User *users.User
			// Strings is the strings argument value.
			Strings []string
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockList   sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(contextMoqParam context.Context, user *users.User) (*users.User, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		User            *users.User
	}{
		ContextMoqParam: contextMoqParam,
		User:            user,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(contextMoqParam, user)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	ContextMoqParam context.Context
	User            *users.User
} {
	var calls []struct {
		ContextMoqParam context.Context
		User            *users.User
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ServiceMock) Delete(ctx context.Context, id string) error {
	if mock.DeleteFunc == nil {
		panic("ServiceMock.DeleteFunc: method is nil but Service.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedService.DeleteCalls())
func (mock *ServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ServiceMock) List(contextMoqParam context.Context, meta *users.Meta) (*users.Meta, []*users.User, error) {
	if mock.ListFunc == nil {
		panic("ServiceMock.ListFunc: method is nil but Service.List was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Meta            *users.Meta
	}{
		ContextMoqParam: contextMoqParam,
		Meta:            meta,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(contextMoqParam, meta)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedService.ListCalls())
func (mock *ServiceMock) ListCalls() []struct {
	ContextMoqParam context.Context
	Meta            *users.Meta
} {
	var calls []struct {
		ContextMoqParam context.Context
		Meta            *users.Meta
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ServiceMock) Update(contextMoqParam context.Context, user *users.User, strings []string) (*users.User, error) {
	if mock.UpdateFunc == nil {
		panic("ServiceMock.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		User            *users.User
		Strings         []string
	}{
		ContextMoqParam: contextMoqParam,
		User:            user,
		Strings:         strings,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(contextMoqParam, user, strings)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ServiceMock) UpdateCalls() []struct {
	ContextMoqParam context.Context
	User            *users.User
	Strings         []string
} {
	var calls []struct {
		ContextMoqParam context.Context
		User            *users.User
		Strings         []string
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
